---

- name: 'Clear assert_* variables'
  set_fact:
    assert_service__services_exists_assertion:
    assert_service__name_defined_assertion:
    assert_service__exists_assertion:
    assert_service__has_state_supported_assertion:
    assert_service__has_state_assertion:
    assert_service__has_status_supported_assertion:
    assert_service__has_status_provided_assertion:
    assert_service__has_status_assertion:

- name: "Assert that name variable is defined"
  assert:
    that: "name is defined"
    fail_msg: 'The variable "name" must be defined.'
  register: 'assert_service__name_defined_assertion'

# services information is accessible using ansible_facts.services
- name: 'Get service facts'
  service_facts:

- name: "Assert that ansible_facts.services exists"
  assert:
    that: "ansible_facts is defined and ansible_facts.services is defined"
    fail_msg: 'Services informations could not be collected by the service_facts module.'
  register: 'assert_service__services_exists_assertion'

- name: "Assert that {{ name }} exists is {{ exists }}"
  assert:
    that: "(ansible_facts.services[name] is defined) == exists"
    fail_msg: 'Expecting {{ name }} to{{ exists | ternary("", " not") }} exist, but was{{ (not exists) | ternary("", " not") }}.'
  register: 'assert_service__exists_assertion'

- name: "Assert that {{ has_state }} is supported"
  assert:
    that: 'has_state in assert_service__supported_states'
    fail_msg: 'Unsupported state {{ has_state }}. State must be in : {{ assert_service__supported_states | join(", ") }}.'
  when: 'exists and has_state is defined'
  register: 'assert_service__has_state_supported_assertion'

- name: "Assert that {{ name }} has state {{ has_state }}"
  assert:
    that: 'ansible_facts.services[name].state == has_state'
    fail_msg: 'Expecting {{ name }} to have state {{ has_state }}, but state is {{ ansible_facts.services[name].state }}.'
  when: 'exists and has_state is defined'
  register: 'assert_service__has_state_assertion'

- name: "Assert that {{ has_status }} is supported"
  assert:
    that: 'has_status in assert_service__supported_statuses'
    fail_msg: 'Unsupported state {{ has_status }}. State must be in : {{ assert_service__supported_statuses | join(", ") }}.'
  when: 'exists and has_status is defined'
  register: 'assert_service__has_status_supported_assertion'

- name: "Assert that status is provided"
  assert:
    that: 'ansible_facts.services[name].status is defined'
    fail_msg: 'Expecting {{ name }} to have status {{ has_status }}, but status is not provided by {{ ansible_facts.services[name].source }}.'
  when: 'exists and has_status is defined'
  register: 'assert_service__has_status_provided_assertion'

- name: "Assert that {{ name }} has status {{ has_status }}"
  assert:
    that: 'ansible_facts.services[name].status == has_status'
    fail_msg: 'Expecting {{ name }} to have status {{ has_status }}, but status is {{ ansible_facts.services[name].status }}.'
  when: 'exists and has_status is defined'
  register: 'assert_service__has_status_assertion'
